// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/service/notification/service.go

// Package notification is a generated GoMock package.
package notification

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockINotificationService is a mock of INotificationService interface.
type MockINotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationServiceMockRecorder
}

// MockINotificationServiceMockRecorder is the mock recorder for MockINotificationService.
type MockINotificationServiceMockRecorder struct {
	mock *MockINotificationService
}

// NewMockINotificationService creates a new mock instance.
func NewMockINotificationService(ctrl *gomock.Controller) *MockINotificationService {
	mock := &MockINotificationService{ctrl: ctrl}
	mock.recorder = &MockINotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationService) EXPECT() *MockINotificationServiceMockRecorder {
	return m.recorder
}

// GetNotificationService mocks base method.
func (m *MockINotificationService) GetNotificationService(ch chan *GetNotificationServiceResponse, model *GetNotificationServiceModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetNotificationService", ch, model)
}

// GetNotificationService indicates an expected call of GetNotificationService.
func (mr *MockINotificationServiceMockRecorder) GetNotificationService(ch, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationService", reflect.TypeOf((*MockINotificationService)(nil).GetNotificationService), ch, model)
}
