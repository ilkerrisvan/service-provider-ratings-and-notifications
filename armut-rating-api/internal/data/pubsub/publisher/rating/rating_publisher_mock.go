// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/data/pubsub/publisher/rating/rating_publisher.go

// Package rating is a generated GoMock package.
package rating

import (
	publisher "armut-rating-api/internal/data/pubsub/publisher"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRatingPublisher is a mock of IRatingPublisher interface.
type MockIRatingPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockIRatingPublisherMockRecorder
}

// MockIRatingPublisherMockRecorder is the mock recorder for MockIRatingPublisher.
type MockIRatingPublisherMockRecorder struct {
	mock *MockIRatingPublisher
}

// NewMockIRatingPublisher creates a new mock instance.
func NewMockIRatingPublisher(ctrl *gomock.Controller) *MockIRatingPublisher {
	mock := &MockIRatingPublisher{ctrl: ctrl}
	mock.recorder = &MockIRatingPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRatingPublisher) EXPECT() *MockIRatingPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIRatingPublisher) Publish(ch chan publisher.PublisherResponse, model *RatingPublisherModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", ch, model)
}

// Publish indicates an expected call of Publish.
func (mr *MockIRatingPublisherMockRecorder) Publish(ch, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIRatingPublisher)(nil).Publish), ch, model)
}
