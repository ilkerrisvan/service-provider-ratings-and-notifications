// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/api/v1/controller/rating/rating_controller.go

// Package rating is a generated GoMock package.
package rating

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIRatingController is a mock of IRatingController interface.
type MockIRatingController struct {
	ctrl     *gomock.Controller
	recorder *MockIRatingControllerMockRecorder
}

// MockIRatingControllerMockRecorder is the mock recorder for MockIRatingController.
type MockIRatingControllerMockRecorder struct {
	mock *MockIRatingController
}

// NewMockIRatingController creates a new mock instance.
func NewMockIRatingController(ctrl *gomock.Controller) *MockIRatingController {
	mock := &MockIRatingController{ctrl: ctrl}
	mock.recorder = &MockIRatingControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRatingController) EXPECT() *MockIRatingControllerMockRecorder {
	return m.recorder
}

// AddRating mocks base method.
func (m *MockIRatingController) AddRating(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRating", context)
}

// AddRating indicates an expected call of AddRating.
func (mr *MockIRatingControllerMockRecorder) AddRating(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRating", reflect.TypeOf((*MockIRatingController)(nil).AddRating), context)
}

// GetAverage mocks base method.
func (m *MockIRatingController) GetAverage(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAverage", context)
}

// GetAverage indicates an expected call of GetAverage.
func (mr *MockIRatingControllerMockRecorder) GetAverage(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverage", reflect.TypeOf((*MockIRatingController)(nil).GetAverage), context)
}

// RegisterRoutes mocks base method.
func (m *MockIRatingController) RegisterRoutes(routerGroup *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRoutes", routerGroup)
}

// RegisterRoutes indicates an expected call of RegisterRoutes.
func (mr *MockIRatingControllerMockRecorder) RegisterRoutes(routerGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutes", reflect.TypeOf((*MockIRatingController)(nil).RegisterRoutes), routerGroup)
}
